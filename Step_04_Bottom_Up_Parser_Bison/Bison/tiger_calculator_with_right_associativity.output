

Terminals which are not used:

   FLOAT
   STRING
   ID
   COMMA
   COLON
   SEMICOLON
   LBRACK
   RBRACK
   LBRACE
   RBRACE
   DOT
   EQ
   NEQ
   LT
   LE
   GT
   GE
   AND
   OR
   ASSIGN
   ARRAY
   IF
   THEN
   ELSE
   WHILE
   FOR
   TO
   DO
   LET
   IN
   END
   OF
   BREAK
   NIL
   FUNCTION
   VAR
   TYPE


Conflict in state 10 between rule 3 and token PLUS resolved as shift.
Conflict in state 10 between rule 3 and token MINUS resolved as shift.
Conflict in state 10 between rule 3 and token TIMES resolved as shift.
Conflict in state 10 between rule 3 and token DIVIDE resolved as shift.
Conflict in state 11 between rule 4 and token PLUS resolved as reduce.
Conflict in state 11 between rule 4 and token MINUS resolved as shift.
Conflict in state 11 between rule 4 and token TIMES resolved as shift.
Conflict in state 11 between rule 4 and token DIVIDE resolved as shift.
Conflict in state 12 between rule 5 and token PLUS resolved as reduce.
Conflict in state 12 between rule 5 and token MINUS resolved as reduce.
Conflict in state 12 between rule 5 and token TIMES resolved as shift.
Conflict in state 12 between rule 5 and token DIVIDE resolved as shift.
Conflict in state 13 between rule 6 and token PLUS resolved as reduce.
Conflict in state 13 between rule 6 and token MINUS resolved as reduce.
Conflict in state 13 between rule 6 and token TIMES resolved as reduce.
Conflict in state 13 between rule 6 and token DIVIDE resolved as shift.

Grammar
rule 1    program -> E
rule 2    E -> INT
rule 3    E -> E PLUS E
rule 4    E -> E MINUS E
rule 5    E -> E TIMES E
rule 6    E -> E DIVIDE E
rule 7    E -> LPAREN E RPAREN

Terminals, with rules where they appear

$ (-1)
error (256)
INT (258) 2
FLOAT (259)
STRING (260)
ID (261)
COMMA (262)
COLON (263)
SEMICOLON (264)
LPAREN (265) 7
RPAREN (266) 7
LBRACK (267)
RBRACK (268)
LBRACE (269)
RBRACE (270)
DOT (271)
PLUS (272) 3
MINUS (273) 4
TIMES (274) 5
DIVIDE (275) 6
EQ (276)
NEQ (277)
LT (278)
LE (279)
GT (280)
GE (281)
AND (282)
OR (283)
ASSIGN (284)
ARRAY (285)
IF (286)
THEN (287)
ELSE (288)
WHILE (289)
FOR (290)
TO (291)
DO (292)
LET (293)
IN (294)
END (295)
OF (296)
BREAK (297)
NIL (298)
FUNCTION (299)
VAR (300)
TYPE (301)

Nonterminals, with rules where they appear

program (47)
    on left: 1
E (48)
    on left: 2 3 4 5 6 7, on right: 1 3 4 5 6 7


state 0

    INT 	shift, and go to state 1
    LPAREN	shift, and go to state 2

    program	go to state 14
    E   	go to state 3



state 1

    E  ->  INT .   (rule 2)

    $default	reduce using rule 2 (E)



state 2

    E  ->  LPAREN . E RPAREN   (rule 7)

    INT 	shift, and go to state 1
    LPAREN	shift, and go to state 2

    E   	go to state 4



state 3

    program  ->  E .   (rule 1)
    E  ->  E . PLUS E   (rule 3)
    E  ->  E . MINUS E   (rule 4)
    E  ->  E . TIMES E   (rule 5)
    E  ->  E . DIVIDE E   (rule 6)

    PLUS	shift, and go to state 5
    MINUS	shift, and go to state 6
    TIMES	shift, and go to state 7
    DIVIDE	shift, and go to state 8

    $default	reduce using rule 1 (program)



state 4

    E  ->  E . PLUS E   (rule 3)
    E  ->  E . MINUS E   (rule 4)
    E  ->  E . TIMES E   (rule 5)
    E  ->  E . DIVIDE E   (rule 6)
    E  ->  LPAREN E . RPAREN   (rule 7)

    RPAREN	shift, and go to state 9
    PLUS	shift, and go to state 5
    MINUS	shift, and go to state 6
    TIMES	shift, and go to state 7
    DIVIDE	shift, and go to state 8



state 5

    E  ->  E PLUS . E   (rule 3)

    INT 	shift, and go to state 1
    LPAREN	shift, and go to state 2

    E   	go to state 10



state 6

    E  ->  E MINUS . E   (rule 4)

    INT 	shift, and go to state 1
    LPAREN	shift, and go to state 2

    E   	go to state 11



state 7

    E  ->  E TIMES . E   (rule 5)

    INT 	shift, and go to state 1
    LPAREN	shift, and go to state 2

    E   	go to state 12



state 8

    E  ->  E DIVIDE . E   (rule 6)

    INT 	shift, and go to state 1
    LPAREN	shift, and go to state 2

    E   	go to state 13



state 9

    E  ->  LPAREN E RPAREN .   (rule 7)

    $default	reduce using rule 7 (E)



state 10

    E  ->  E . PLUS E   (rule 3)
    E  ->  E PLUS E .   (rule 3)
    E  ->  E . MINUS E   (rule 4)
    E  ->  E . TIMES E   (rule 5)
    E  ->  E . DIVIDE E   (rule 6)

    PLUS	shift, and go to state 5
    MINUS	shift, and go to state 6
    TIMES	shift, and go to state 7
    DIVIDE	shift, and go to state 8

    $default	reduce using rule 3 (E)



state 11

    E  ->  E . PLUS E   (rule 3)
    E  ->  E . MINUS E   (rule 4)
    E  ->  E MINUS E .   (rule 4)
    E  ->  E . TIMES E   (rule 5)
    E  ->  E . DIVIDE E   (rule 6)

    MINUS	shift, and go to state 6
    TIMES	shift, and go to state 7
    DIVIDE	shift, and go to state 8

    $default	reduce using rule 4 (E)



state 12

    E  ->  E . PLUS E   (rule 3)
    E  ->  E . MINUS E   (rule 4)
    E  ->  E . TIMES E   (rule 5)
    E  ->  E TIMES E .   (rule 5)
    E  ->  E . DIVIDE E   (rule 6)

    TIMES	shift, and go to state 7
    DIVIDE	shift, and go to state 8

    $default	reduce using rule 5 (E)



state 13

    E  ->  E . PLUS E   (rule 3)
    E  ->  E . MINUS E   (rule 4)
    E  ->  E . TIMES E   (rule 5)
    E  ->  E . DIVIDE E   (rule 6)
    E  ->  E DIVIDE E .   (rule 6)

    DIVIDE	shift, and go to state 8

    $default	reduce using rule 6 (E)



state 14

    $   	go to state 15



state 15

    $   	go to state 16



state 16

    $default	accept
