

Terminals which are not used:

   FLOAT
   STRING
   ID
   COMMA
   COLON
   SEMICOLON
   LPAREN
   RPAREN
   LBRACK
   RBRACK
   LBRACE
   RBRACE
   TIMES
   DIVIDE
   EQ
   NEQ
   LT
   LE
   GT
   GE
   AND
   OR
   ASSIGN
   ARRAY
   IF
   THEN
   ELSE
   WHILE
   FOR
   TO
   DO
   LET
   IN
   END
   OF
   BREAK
   NIL
   FUNCTION
   TYPE



Grammar
rule 1    program -> RowOpList
rule 2    RowOpList -> RowOp
rule 3    RowOpList -> RowOp RowOpList
rule 4    op -> PLUS
rule 5    op -> MINUS
rule 6    Number -> INT
rule 7    RowOp -> ROW DOUBLE_ARROW ROW
rule 8    RowOp -> ROW ARROW ROW op Number ROW

Terminals, with rules where they appear

$ (-1)
error (256)
INT (258) 6
FLOAT (259)
STRING (260)
ID (261)
COMMA (262)
COLON (263)
SEMICOLON (264)
LPAREN (265)
RPAREN (266)
LBRACK (267)
RBRACK (268)
LBRACE (269)
RBRACE (270)
ARROW (271) 8
PLUS (272) 4
MINUS (273) 5
TIMES (274)
DIVIDE (275)
EQ (276)
NEQ (277)
LT (278)
LE (279)
GT (280)
GE (281)
AND (282)
OR (283)
ASSIGN (284)
ARRAY (285)
IF (286)
THEN (287)
ELSE (288)
WHILE (289)
FOR (290)
TO (291)
DO (292)
LET (293)
IN (294)
END (295)
OF (296)
BREAK (297)
NIL (298)
FUNCTION (299)
DOUBLE_ARROW (300) 7
ROW (301) 7 8
TYPE (302)

Nonterminals, with rules where they appear

program (48)
    on left: 1
RowOpList (49)
    on left: 2 3, on right: 1 3
op (50)
    on left: 4 5, on right: 8
Number (51)
    on left: 6, on right: 8
RowOp (52)
    on left: 7 8, on right: 2 3


state 0

    ROW 	shift, and go to state 1

    program	go to state 15
    RowOpList	go to state 2
    RowOp	go to state 3



state 1

    RowOp  ->  ROW . DOUBLE_ARROW ROW   (rule 7)
    RowOp  ->  ROW . ARROW ROW op Number ROW   (rule 8)

    ARROW	shift, and go to state 4
    DOUBLE_ARROW	shift, and go to state 5



state 2

    program  ->  RowOpList .   (rule 1)

    $default	reduce using rule 1 (program)



state 3

    RowOpList  ->  RowOp .   (rule 2)
    RowOpList  ->  RowOp . RowOpList   (rule 3)

    ROW 	shift, and go to state 1

    $default	reduce using rule 2 (RowOpList)

    RowOpList	go to state 6
    RowOp	go to state 3



state 4

    RowOp  ->  ROW ARROW . ROW op Number ROW   (rule 8)

    ROW 	shift, and go to state 7



state 5

    RowOp  ->  ROW DOUBLE_ARROW . ROW   (rule 7)

    ROW 	shift, and go to state 8



state 6

    RowOpList  ->  RowOp RowOpList .   (rule 3)

    $default	reduce using rule 3 (RowOpList)



state 7

    RowOp  ->  ROW ARROW ROW . op Number ROW   (rule 8)

    PLUS	shift, and go to state 9
    MINUS	shift, and go to state 10

    op  	go to state 11



state 8

    RowOp  ->  ROW DOUBLE_ARROW ROW .   (rule 7)

    $default	reduce using rule 7 (RowOp)



state 9

    op  ->  PLUS .   (rule 4)

    $default	reduce using rule 4 (op)



state 10

    op  ->  MINUS .   (rule 5)

    $default	reduce using rule 5 (op)



state 11

    RowOp  ->  ROW ARROW ROW op . Number ROW   (rule 8)

    INT 	shift, and go to state 12

    Number	go to state 13



state 12

    Number  ->  INT .   (rule 6)

    $default	reduce using rule 6 (Number)



state 13

    RowOp  ->  ROW ARROW ROW op Number . ROW   (rule 8)

    ROW 	shift, and go to state 14



state 14

    RowOp  ->  ROW ARROW ROW op Number ROW .   (rule 8)

    $default	reduce using rule 8 (RowOp)



state 15

    $   	go to state 16



state 16

    $   	go to state 17



state 17

    $default	accept
