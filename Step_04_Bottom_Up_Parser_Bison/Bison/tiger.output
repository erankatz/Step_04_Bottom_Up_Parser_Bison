Useless nonterminals:

   matrix


Terminals which are not used:

   FLOAT
   STRING
   ID
   COMMA
   COLON
   SEMICOLON
   LPAREN
   RPAREN
   LBRACK
   RBRACK
   LBRACE
   RBRACE
   TIMES
   EQ
   NEQ
   LT
   LE
   GT
   GE
   AND
   OR
   ASSIGN
   ARRAY
   IF
   THEN
   ELSE
   WHILE
   FOR
   TO
   DO
   LET
   IN
   END
   OF
   BREAK
   NIL
   FUNCTION
   TYPE


Useless rules:

#1     matrix :	 LBRACK INT INT INT SEMICOLON INT INT INT SEMICOLON INT INT INT RBRACK;



Grammar
rule 2    program -> RowOpList
rule 3    RowOpList -> RowOp
rule 4    RowOpList -> RowOp RowOpList
rule 5    op -> PLUS
rule 6    op -> MINUS
rule 7    Number -> INT
rule 8    Number -> INT DIVIDE INT
rule 9    RowOp -> ROW DOUBLE_ARROW ROW
rule 10   RowOp -> ROW ARROW ROW op Number ROW

Terminals, with rules where they appear

$ (-1)
error (256)
INT (258) 1 7 8
FLOAT (259)
STRING (260)
ID (261)
COMMA (262)
COLON (263)
SEMICOLON (264) 1
LPAREN (265)
RPAREN (266)
LBRACK (267) 1
RBRACK (268) 1
LBRACE (269)
RBRACE (270)
ARROW (271) 10
PLUS (272) 5
MINUS (273) 6
TIMES (274)
DIVIDE (275) 8
EQ (276)
NEQ (277)
LT (278)
LE (279)
GT (280)
GE (281)
AND (282)
OR (283)
ASSIGN (284)
ARRAY (285)
IF (286)
THEN (287)
ELSE (288)
WHILE (289)
FOR (290)
TO (291)
DO (292)
LET (293)
IN (294)
END (295)
OF (296)
BREAK (297)
NIL (298)
FUNCTION (299)
DOUBLE_ARROW (300) 9
ROW (301) 9 10
TYPE (302)

Nonterminals, with rules where they appear

program (48)
    on left: 2
RowOpList (49)
    on left: 3 4, on right: 2 4
op (50)
    on left: 5 6, on right: 10
Number (51)
    on left: 7 8, on right: 10
RowOp (52)
    on left: 9 10, on right: 3 4


state 0

    ROW 	shift, and go to state 1

    program	go to state 17
    RowOpList	go to state 2
    RowOp	go to state 3



state 1

    RowOp  ->  ROW . DOUBLE_ARROW ROW   (rule 9)
    RowOp  ->  ROW . ARROW ROW op Number ROW   (rule 10)

    ARROW	shift, and go to state 4
    DOUBLE_ARROW	shift, and go to state 5



state 2

    program  ->  RowOpList .   (rule 2)

    $default	reduce using rule 2 (program)



state 3

    RowOpList  ->  RowOp .   (rule 3)
    RowOpList  ->  RowOp . RowOpList   (rule 4)

    ROW 	shift, and go to state 1

    $default	reduce using rule 3 (RowOpList)

    RowOpList	go to state 6
    RowOp	go to state 3



state 4

    RowOp  ->  ROW ARROW . ROW op Number ROW   (rule 10)

    ROW 	shift, and go to state 7



state 5

    RowOp  ->  ROW DOUBLE_ARROW . ROW   (rule 9)

    ROW 	shift, and go to state 8



state 6

    RowOpList  ->  RowOp RowOpList .   (rule 4)

    $default	reduce using rule 4 (RowOpList)



state 7

    RowOp  ->  ROW ARROW ROW . op Number ROW   (rule 10)

    PLUS	shift, and go to state 9
    MINUS	shift, and go to state 10

    op  	go to state 11



state 8

    RowOp  ->  ROW DOUBLE_ARROW ROW .   (rule 9)

    $default	reduce using rule 9 (RowOp)



state 9

    op  ->  PLUS .   (rule 5)

    $default	reduce using rule 5 (op)



state 10

    op  ->  MINUS .   (rule 6)

    $default	reduce using rule 6 (op)



state 11

    RowOp  ->  ROW ARROW ROW op . Number ROW   (rule 10)

    INT 	shift, and go to state 12

    Number	go to state 13



state 12

    Number  ->  INT .   (rule 7)
    Number  ->  INT . DIVIDE INT   (rule 8)

    DIVIDE	shift, and go to state 14

    $default	reduce using rule 7 (Number)



state 13

    RowOp  ->  ROW ARROW ROW op Number . ROW   (rule 10)

    ROW 	shift, and go to state 15



state 14

    Number  ->  INT DIVIDE . INT   (rule 8)

    INT 	shift, and go to state 16



state 15

    RowOp  ->  ROW ARROW ROW op Number ROW .   (rule 10)

    $default	reduce using rule 10 (RowOp)



state 16

    Number  ->  INT DIVIDE INT .   (rule 8)

    $default	reduce using rule 8 (Number)



state 17

    $   	go to state 18



state 18

    $   	go to state 19



state 19

    $default	accept
